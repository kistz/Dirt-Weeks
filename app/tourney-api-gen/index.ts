// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.4.0 (commit 111ff87aad977af89168b6ac4815bc39372eb9f9).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { PostEvent } from "./post_event_reducer.ts";
export { PostEvent };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SendMessageSched } from "./send_message_sched_reducer.ts";
export { SendMessageSched };
import { SetName } from "./set_name_reducer.ts";
export { SetName };

// Import and reexport all table handle types
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { SendMessageScheduleTableHandle } from "./send_message_schedule_table.ts";
export { SendMessageScheduleTableHandle };
import { ServerTableHandle } from "./server_table.ts";
export { ServerTableHandle };
import { ServerEventsTableHandle } from "./server_events_table.ts";
export { ServerEventsTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Custom } from "./custom_type.ts";
export { Custom };
import { EndMapEnd } from "./end_map_end_type.ts";
export { EndMapEnd };
import { EndMapStart } from "./end_map_start_type.ts";
export { EndMapStart };
import { EndRoundEnd } from "./end_round_end_type.ts";
export { EndRoundEnd };
import { EndRoundStart } from "./end_round_start_type.ts";
export { EndRoundStart };
import { Event } from "./event_type.ts";
export { Event };
import { GiveUp } from "./give_up_type.ts";
export { GiveUp };
import { LoadingMapEnd } from "./loading_map_end_type.ts";
export { LoadingMapEnd };
import { LoadingMapStart } from "./loading_map_start_type.ts";
export { LoadingMapStart };
import { Map } from "./map_type.ts";
export { Map };
import { Message } from "./message_type.ts";
export { Message };
import { PlayLoopEnd } from "./play_loop_end_type.ts";
export { PlayLoopEnd };
import { PlayLoopStart } from "./play_loop_start_type.ts";
export { PlayLoopStart };
import { Player } from "./player_type.ts";
export { Player };
import { Podium } from "./podium_type.ts";
export { Podium };
import { Respawn } from "./respawn_type.ts";
export { Respawn };
import { RoundTime } from "./round_time_type.ts";
export { RoundTime };
import { Scores } from "./scores_type.ts";
export { Scores };
import { SendMessageSchedule } from "./send_message_schedule_type.ts";
export { SendMessageSchedule };
import { Server } from "./server_type.ts";
export { Server };
import { ServerEvents } from "./server_events_type.ts";
export { ServerEvents };
import { ServerStatus } from "./server_status_type.ts";
export { ServerStatus };
import { StartLine } from "./start_line_type.ts";
export { StartLine };
import { StartMap } from "./start_map_type.ts";
export { StartMap };
import { StartTurn } from "./start_turn_type.ts";
export { StartTurn };
import { Team } from "./team_type.ts";
export { Team };
import { UnloadingMapEnd } from "./unloading_map_end_type.ts";
export { UnloadingMapEnd };
import { UnloadingMapStart } from "./unloading_map_start_type.ts";
export { UnloadingMapStart };
import { User } from "./user_type.ts";
export { User };
import { WayPoint } from "./way_point_type.ts";
export { WayPoint };

const REMOTE_MODULE = {
  tables: {
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
    },
    send_message_schedule: {
      tableName: "send_message_schedule",
      rowType: SendMessageSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: (SendMessageSchedule.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    server: {
      tableName: "server",
      rowType: Server.getTypeScriptAlgebraicType(),
    },
    server_events: {
      tableName: "server_events",
      rowType: ServerEvents.getTypeScriptAlgebraicType(),
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    post_event: {
      reducerName: "post_event",
      argsType: PostEvent.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    send_message_sched: {
      reducerName: "send_message_sched",
      argsType: SendMessageSched.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.4.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClientConnected", args: ClientConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "PostEvent", args: PostEvent }
| { name: "SendMessage", args: SendMessage }
| { name: "SendMessageSched", args: SendMessageSched }
| { name: "SetName", args: SetName }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  postEvent(event: Event) {
    const __args = { event };
    let __writer = new __BinaryWriter(1024);
    PostEvent.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("post_event", __argsBuffer, this.setCallReducerFlags.postEventFlags);
  }

  onPostEvent(callback: (ctx: ReducerEventContext, event: Event) => void) {
    this.connection.onReducer("post_event", callback);
  }

  removeOnPostEvent(callback: (ctx: ReducerEventContext, event: Event) => void) {
    this.connection.offReducer("post_event", callback);
  }

  sendMessage(text: string) {
    const __args = { text };
    let __writer = new __BinaryWriter(1024);
    SendMessage.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("send_message", callback);
  }

  sendMessageSched(arg: SendMessageSchedule) {
    const __args = { arg };
    let __writer = new __BinaryWriter(1024);
    SendMessageSched.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message_sched", __argsBuffer, this.setCallReducerFlags.sendMessageSchedFlags);
  }

  onSendMessageSched(callback: (ctx: ReducerEventContext, arg: SendMessageSchedule) => void) {
    this.connection.onReducer("send_message_sched", callback);
  }

  removeOnSendMessageSched(callback: (ctx: ReducerEventContext, arg: SendMessageSchedule) => void) {
    this.connection.offReducer("send_message_sched", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new __BinaryWriter(1024);
    SetName.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

}

export class SetReducerFlags {
  postEventFlags: __CallReducerFlags = 'FullUpdate';
  postEvent(flags: __CallReducerFlags) {
    this.postEventFlags = flags;
  }

  sendMessageFlags: __CallReducerFlags = 'FullUpdate';
  sendMessage(flags: __CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  sendMessageSchedFlags: __CallReducerFlags = 'FullUpdate';
  sendMessageSched(flags: __CallReducerFlags) {
    this.sendMessageSchedFlags = flags;
  }

  setNameFlags: __CallReducerFlags = 'FullUpdate';
  setName(flags: __CallReducerFlags) {
    this.setNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get message(): MessageTableHandle {
    // clientCache is a private property
    return new MessageTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get sendMessageSchedule(): SendMessageScheduleTableHandle {
    // clientCache is a private property
    return new SendMessageScheduleTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<SendMessageSchedule>(REMOTE_MODULE.tables.send_message_schedule));
  }

  get server(): ServerTableHandle {
    // clientCache is a private property
    return new ServerTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Server>(REMOTE_MODULE.tables.server));
  }

  get serverEvents(): ServerEventsTableHandle {
    // clientCache is a private property
    return new ServerEventsTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<ServerEvents>(REMOTE_MODULE.tables.server_events));
  }

  get user(): UserTableHandle {
    // clientCache is a private property
    return new UserTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
